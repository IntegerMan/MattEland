//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AniWebApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AniEntities : DbContext
    {
        public AniEntities()
            : base("name=AniEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TrafficIncident> TrafficIncidents { get; set; }
        public virtual DbSet<FrostPredictionDataView> FrostPredictionDataViews { get; set; }
        public virtual DbSet<GPSLocation> GPSLocations { get; set; }
        public virtual DbSet<LogEntry> LogEntries { get; set; }
        public virtual DbSet<Node> Nodes { get; set; }
        public virtual DbSet<NodeType> NodeTypes { get; set; }
        public virtual DbSet<Severity> Severities { get; set; }
        public virtual DbSet<TrafficIncidentSeverity> TrafficIncidentSeverities { get; set; }
        public virtual DbSet<TrafficIncidentType> TrafficIncidentTypes { get; set; }
        public virtual DbSet<Transit> Transits { get; set; }
        public virtual DbSet<UserNode> UserNodes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WeatherCode> WeatherCodes { get; set; }
        public virtual DbSet<WeatherFrostResult> WeatherFrostResults { get; set; }
        public virtual DbSet<WeatherPrediction> WeatherPredictions { get; set; }
        public virtual DbSet<WeatherSource> WeatherSources { get; set; }
        public virtual DbSet<ZipCode> ZipCodes { get; set; }
    
        public virtual ObjectResult<ActiveTrafficIncidentInfoSelect_Result> ActiveTrafficIncidentInfoSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveTrafficIncidentInfoSelect_Result>("ActiveTrafficIncidentInfoSelect");
        }
    
        public virtual int InsertUpdateTrafficIncident(Nullable<long> incidentID, string description, string congsestion, string detour, string lane, Nullable<bool> roadClosed, Nullable<bool> verified, Nullable<System.DateTime> createdTimeUTC, Nullable<System.DateTime> modifiedTimeUTC, Nullable<System.DateTime> startTimeUTC, Nullable<System.DateTime> endTimeUTC, Nullable<double> locationLat, Nullable<double> locationLng, Nullable<double> endLocationLat, Nullable<double> endLocationLng, Nullable<int> creatorUserNodeID, Nullable<int> severityID, Nullable<int> typeID)
        {
            var incidentIDParameter = incidentID.HasValue ?
                new ObjectParameter("IncidentID", incidentID) :
                new ObjectParameter("IncidentID", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var congsestionParameter = congsestion != null ?
                new ObjectParameter("Congsestion", congsestion) :
                new ObjectParameter("Congsestion", typeof(string));
    
            var detourParameter = detour != null ?
                new ObjectParameter("Detour", detour) :
                new ObjectParameter("Detour", typeof(string));
    
            var laneParameter = lane != null ?
                new ObjectParameter("Lane", lane) :
                new ObjectParameter("Lane", typeof(string));
    
            var roadClosedParameter = roadClosed.HasValue ?
                new ObjectParameter("RoadClosed", roadClosed) :
                new ObjectParameter("RoadClosed", typeof(bool));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var createdTimeUTCParameter = createdTimeUTC.HasValue ?
                new ObjectParameter("CreatedTimeUTC", createdTimeUTC) :
                new ObjectParameter("CreatedTimeUTC", typeof(System.DateTime));
    
            var modifiedTimeUTCParameter = modifiedTimeUTC.HasValue ?
                new ObjectParameter("ModifiedTimeUTC", modifiedTimeUTC) :
                new ObjectParameter("ModifiedTimeUTC", typeof(System.DateTime));
    
            var startTimeUTCParameter = startTimeUTC.HasValue ?
                new ObjectParameter("StartTimeUTC", startTimeUTC) :
                new ObjectParameter("StartTimeUTC", typeof(System.DateTime));
    
            var endTimeUTCParameter = endTimeUTC.HasValue ?
                new ObjectParameter("EndTimeUTC", endTimeUTC) :
                new ObjectParameter("EndTimeUTC", typeof(System.DateTime));
    
            var locationLatParameter = locationLat.HasValue ?
                new ObjectParameter("LocationLat", locationLat) :
                new ObjectParameter("LocationLat", typeof(double));
    
            var locationLngParameter = locationLng.HasValue ?
                new ObjectParameter("LocationLng", locationLng) :
                new ObjectParameter("LocationLng", typeof(double));
    
            var endLocationLatParameter = endLocationLat.HasValue ?
                new ObjectParameter("EndLocationLat", endLocationLat) :
                new ObjectParameter("EndLocationLat", typeof(double));
    
            var endLocationLngParameter = endLocationLng.HasValue ?
                new ObjectParameter("EndLocationLng", endLocationLng) :
                new ObjectParameter("EndLocationLng", typeof(double));
    
            var creatorUserNodeIDParameter = creatorUserNodeID.HasValue ?
                new ObjectParameter("CreatorUserNodeID", creatorUserNodeID) :
                new ObjectParameter("CreatorUserNodeID", typeof(int));
    
            var severityIDParameter = severityID.HasValue ?
                new ObjectParameter("SeverityID", severityID) :
                new ObjectParameter("SeverityID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateTrafficIncident", incidentIDParameter, descriptionParameter, congsestionParameter, detourParameter, laneParameter, roadClosedParameter, verifiedParameter, createdTimeUTCParameter, modifiedTimeUTCParameter, startTimeUTCParameter, endTimeUTCParameter, locationLatParameter, locationLngParameter, endLocationLatParameter, endLocationLngParameter, creatorUserNodeIDParameter, severityIDParameter, typeIDParameter);
        }
    
        public virtual int InsertUpdateWeatherPrediction(Nullable<System.DateTime> predictionDateUTC, Nullable<int> creatorNodeID, Nullable<int> zipCode, Nullable<double> low, Nullable<double> high, Nullable<int> code, Nullable<double> minutesToDefrost)
        {
            var predictionDateUTCParameter = predictionDateUTC.HasValue ?
                new ObjectParameter("PredictionDateUTC", predictionDateUTC) :
                new ObjectParameter("PredictionDateUTC", typeof(System.DateTime));
    
            var creatorNodeIDParameter = creatorNodeID.HasValue ?
                new ObjectParameter("CreatorNodeID", creatorNodeID) :
                new ObjectParameter("CreatorNodeID", typeof(int));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var lowParameter = low.HasValue ?
                new ObjectParameter("Low", low) :
                new ObjectParameter("Low", typeof(double));
    
            var highParameter = high.HasValue ?
                new ObjectParameter("High", high) :
                new ObjectParameter("High", typeof(double));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var minutesToDefrostParameter = minutesToDefrost.HasValue ?
                new ObjectParameter("MinutesToDefrost", minutesToDefrost) :
                new ObjectParameter("MinutesToDefrost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateWeatherPrediction", predictionDateUTCParameter, creatorNodeIDParameter, zipCodeParameter, lowParameter, highParameter, codeParameter, minutesToDefrostParameter);
        }
    
        public virtual ObjectResult<ActiveWeatherPredictionsSelect_Result> ActiveWeatherPredictionsSelect(Nullable<int> zipCode)
        {
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveWeatherPredictionsSelect_Result>("ActiveWeatherPredictionsSelect", zipCodeParameter);
        }
    }
}

@model Ani.Core.Models.Metrics.UserRatingHistoryModel

@{
    Layout = "~/Views/Shared/_ListLayout.cshtml";
    ViewBag.Title = string.Format("{0} Ratings", Model.Rating.Name);
    ViewBag.BreadcrumbTitle = Model.Rating.Name;
    ViewBag.Lead = Model.Rating.Description;
    ViewBag.ListNoItemsMessage = string.Format("You have not entered any {0} ratings yet.", Model.Rating.Name);
    ViewBag.ListTitle = string.Format("{0} Ratings", Model.Rating.Name); ;
    ViewBag.HasListItems = @Model.HistoryEntries.Any();
}

@section breadcrumbs
{
    <li><a href="@Url.Action("ANI", "Projects")">ANI</a></li>
    <li><a href="@Url.Action("Index", "Ratings")">Ratings</a></li>
}

@section header_side_content
{
    @Html.ActionLink("Add Entry", "AddEntry", new { RatingId = @Model.Rating.Id }, new { @class = "btn btn-primary" })
}

@section scripts
{
    @Scripts.Render("http://d3js.org/d3.v3.min.js")
    @Scripts.Render("http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js")

    <script type="text/javascript">

        function addBar(svg, index, value, minValue, maxValue, svgHeight, tip, date, comments) {

            var width = 10;
            var itemHeight = ((value - minValue + 1) / (maxValue - minValue + 1)) * svgHeight;

            svg.append("rect")
                .attr("class", "bar")
                .attr("x", index * (width + 1))
                .attr("width", width)
                .attr("y", svgHeight - itemHeight)
                .attr("height", itemHeight)
                .on('mouseover', tip.show)
                .on('mouseout', tip.hide)
                .datum({ value: value, minValue: minValue, maxValue: maxValue, date: date, comments: comments});
    }

        $(function () {

            var height = 50;

            var svg = d3.select("#ChartContainer").append("svg")
                .attr("height", height)
                .attr("width", 700);

            var tip = d3.tip()
                .attr('class', 'label label-info text-justify')
                .offset([-20, 0])
                .html(function(d) {
                    return "<p>" + d.value + "/" + d.maxValue + " on " + d.date + "</p><p>" + d.comments + "</p>";
                });

            svg.call(tip);

            var index = 0;

            @foreach (var entry in Model.HistoryEntries)
            {
                @:addBar(svg, index++, @entry.RatingValue, @Model.Rating.MinValue, @Model.Rating.MaxValue, height, tip, "@entry.EntryDate.ToLongDateString()", "@entry.Comments");
            }

        });

    </script>
}

@section top_content
{
    <div id="ChartContainer"></div>
}

@section table_headers
{
    <th>Date</th>
    <th>Rating</th>
    <th>Comments</th>
    <th>Actions</th>
}

@section table_body
{
    @foreach (var entry in Model.HistoryEntries)
    {
        <tr>
            <td>
                @Html.ActionLink(entry.EntryDate.ToLongDateString(), "ViewEntry",
                new
                {
                    ratingId = entry.Rating.Id,
                    year = entry.EntryDate.Year,
                    month = entry.EntryDate.Month,
                    day = entry.EntryDate.Day
                })
            </td>
            <td>
                <span class="text-nowrap">
                    <span class="bg-primary margin-right">
                        &nbsp;@entry.RatingValue / @Model.Rating.MaxValue
                    </span>

                    @for (int i = @Model.Rating.MinValue; i <= @Model.Rating.MaxValue; i++)
                    {
                        if (i <= entry.RatingValue)
                        {
                            @:<i class="fa fa-star text-primary"></i>
                        }
                        else
                        {
                            @:<i class="fa fa-star-o"></i>
                        }
                    }
                </span>
            </td>
            <td>
                @entry.Comments
            </td>
            <td>
                @Html.ActionLink("Edit", "EditEntry", new
                                                {
                                                    ratingId = @Model.Rating.Id,
                                                    year = entry.EntryDate.Year,
                                                    month = entry.EntryDate.Month,
                                                    day = entry.EntryDate.Day
                                                })
            </td>
        </tr>
    }

}
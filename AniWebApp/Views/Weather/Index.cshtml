@using AniWebApp.Helpers
@using Microsoft.Ajax.Utilities

@model Ani.Core.Models.Weather.WeatherHomeModel

@{
    ViewBag.Title = "Weather for " + @Model.ZipCode; ;
    ViewBag.BreadcrumbTitle = "Weather";
    Layout = "~/Views/Shared/_CommonLayout.cshtml";
}

@section heading {
    @Styles.Render("~/content/weather-icons.min.css")
}

@section scripts
{
    @Scripts.Render("http://d3js.org/d3.v3.min.js")
    @Scripts.Render("http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js")

    <script type="text/javascript">

        function drawForecastLine(svg, lineFunc, x, y, lineData, stroke, hideTip, showTip) {

            // Draw the forecast line
            svg.append('svg:path')
              .transition()
              .attr('d', lineFunc(lineData))
              .attr('stroke', stroke)
              .attr('stroke-width', 2)
              .attr('fill', 'none');

            // Draw the data nodes with tooltip support
            svg.selectAll("dot")
                .data(lineData, function(d) { return d.x; })
                .enter().append("circle")
                .attr("cx", function(d) { return x(d.x); })
                .attr("cy", function(d) { return y(d.y); })
                .attr("r", 2.5)
                .attr("fill", "white")
                .on("mouseover", function(d) {
                    hideTip.hide();
                    showTip.html(d.y + "&deg;");
                    showTip.show();
                    d3.select(this).style("fill", stroke);
                })
                .on("mouseout", function() {
                    showTip.hide();
                    d3.select(this).style("fill", "white");
                });

            
        }

        $(function () {

            var width = 935;
            var height = 60;

            var svg = d3.select("#svgForecastContainer").append("svg")
                .attr("height", height)
                .attr("maxwidth", width)
                .attr("width", "100%");

            // Translate our objects to JSON
            var lowLineData = @Html.Raw(Model.ForecastLowLineData);
            var highLineData = @Html.Raw(Model.ForecastHighLineData);

            // Add tooltip for low
            var tipLow = d3.tip()
                .attr('class', 'label label-info text-justify');
            svg.call(tipLow);

            // Add tooltip for high
            var tipHigh = d3.tip()
                .attr('class', 'label label-danger text-justify');
            svg.call(tipHigh);

            // Set the ranges
            var x = d3.scale
                      .linear()
                      .domain([0, 4])
                      .range([30, width]);

            var y = d3.scale
                      .linear()
                      .domain([@Model.Forecasts.Min(f => f.Low) - 5, @Model.Forecasts.Max(f => f.High) + 5])
                      .range([height, 0]);

            var yAxis = d3.svg.axis().scale(y).orient("left").ticks(4).tickSize(-width, 0, 0);
            
            svg.append("g").attr("transform", "translate(20, 0)").call(yAxis).attr("fill","none");

            d3.selectAll(".tick > text")
                .style("font-size", function(d) { return 10; });

            // Determine how to do our drawing
            var lineFunc = d3.svg.line()
                .x(function (d) { return x(d.x); })
                .y(function (d) { return y(d.y); })
                .interpolate("basis");

            // Draw Forecast lines with data nodes
            drawForecastLine(svg, lineFunc, x, y, lowLineData, '#5555FF', tipHigh, tipLow);
            drawForecastLine(svg, lineFunc, x, y, highLineData, '#ff5555', tipLow, tipHigh);

        });

    </script>
}

<h2>Current Weather</h2>

@if (Model.Conditions == null)
{
    <div class="alert alert-danger">
        Weather is not available. The requested area may not be within the service area.
    </div>
}
else
{
    <div class="row">
        <div class="col-md-2 col-sm-4 text-center">
            <div class="panel active @Html.GetPanelClass(Model.Conditions.SeverityId, defaultClass: "panel-primary")">
                <div class=" panel-heading">
                    @DateTime.Today.ToString("ddd M/d")
                </div>
                <div class="panel-body tile-panel-tall @Html.GetTextClass(Model.Conditions.SeverityId)">
                    <br />
                    <i class="fa-3x @Model.Conditions.IconClass"></i><br />
                    <br />
                    @(Model.Conditions.Description.IsNullOrWhiteSpace() ? Model.Conditions.WeatherCodeName : Model.Conditions.Description)
                </div>
                <div class="panel-footer active">
                    Temp: <span class="label @Html.GetLabelClass(Model.Conditions.SeverityId, defaultClass: "label-primary")">@Model.Conditions.Temperature&deg;</span>
                </div>
            </div>
        </div>
        <div class="col-md-8 col-sm-8">
            <div class="panel @Html.GetPanelClass(Model.Conditions.SeverityId, defaultClass: "panel-primary")">
                <div class="panel-heading">
                    Details
                </div>
                <div class="panel-body tile-panel-tall-no-footer row">
                    <div class="col-sm-6">
                        <table class="table table-condensed table-no-lines">
                            <tbody>
                                <tr>
                                    <td class="text-right">Windchill</td>
                                    <td>@Model.Conditions.WindChill&deg;</td>
                                </tr>
                                <tr>
                                    <td class="text-right">Wind</td>
                                    <td>@Model.Conditions.WindSpeed mph - @Model.Conditions.WindCardinalDirection</td>
                                </tr>
                                <tr>
                                    <td class="text-right">Sunrise</td>
                                    <td>@Model.Conditions.Sunrise</td>
                                </tr>
                                <tr>
                                    <td class="text-right">Sunset</td>
                                    <td>@Model.Conditions.Sunset</td>
                                </tr>
                                <tr>
                                    <td class="text-right">Humidity</td>
                                    <td>@Model.Conditions.Humidity</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-sm-6">
                        <table class="table table-condensed table-no-lines">
                            <tbody>
                                <tr>
                                    <td class="text-right">Visibility</td>
                                    <td>@Model.Conditions.Visibility mi</td>
                                </tr>
                                <tr>
                                    <td class="text-right">Pressure</td>
                                    <td>@Model.Conditions.Pressure in</td>
                                </tr>
                                <tr>
                                    <td class="text-right">UV Index</td>
                                    <td>@Model.Conditions.Rising</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (Model.Forecasts != null && Model.Forecasts.Any())
{
    <h2>Forecast</h2>

    <div class="row">
        <div class="col-md-10 col-sm-10 col-lg-10 col-xs-10 margin-bottom" id="svgForecastContainer">
        </div>
    </div>

    <div class="row">

        @foreach (var m in Model.Forecasts.Take(5))
        {
            <div class="col-md-2 col-sm-4 col-xs-6 text-center">
                <div class="panel @Html.GetPanelClass(m.SeverityId)">
                    <div class="panel-heading">
                        @m.ForecastDate.ToString("ddd M/d")
                    </div>

                    <div class="panel-body tile-panel @Html.GetTextClass(m.SeverityId)">
                        <i class="wi fa-3x @m.IconClass"></i><br />
                        <br />
                        @(m.Description.IsNullOrWhiteSpace() ? m.WeatherCodeName : m.Description)
                    </div>
                    <div class="panel-footer">
                        <small>
                            Temp: <span class="label label-info">@m.Low&deg;</span>-<span class="label label-danger">@m.High&deg;</span> <br />
                            @if (m.MinutesToDefrost.HasValue)
                            {
                                if (m.MinutesToDefrost <= 0)
                                {
                                    @:No Frost
                            }
                                else if (m.MinutesToDefrost <= 1.5)
                                {
                                    @:1 min Frost
                            }
                                else
                                {
                                    @m.MinutesToDefrost.Value.ToString("0 mins Frost")
                                }
                            }
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-md-10">
            <div class="alert alert-warning">
                <p>
                    Frost Time is still in early development as a neural network is still being trained as data accumulates.
                    Predictions may be comically bad during this time. 
                </p>
            </div>
            <a class="btn btn-default" href="@Url.Action("Frost", "Weather")">
                View Frost Data
            </a>
        </div>
    </div>

}
